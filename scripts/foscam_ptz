#!/usr/bin/python
# -*- coding: utf-8 -*-
"""Node that will subscribe to a commanded velocity and move a Foscam PTZ camera."""

import urllib
from enum import Enum
import rospy
from geometry_msgs.msg import Twist


# pylint: disable=no-init
# pylint: disable=too-few-public-methods
class Commands(Enum):
    """Available PTZ commands."""

    MOVE_UP = 0
    STOP_UP = 1
    MOVE_DOWN = 2
    STOP_DOWN = 3
    MOVE_LEFT = 4
    STOP_LEFT = 5
    MOVE_RIGHT = 6
    STOP_RIGHT = 7


# pylint: enable=too-few-public-methods
# pylint: enable=no-init


class FoscamPTZ(object):
    """Get velocities and move camera."""

    def __init__(self):
        self.username = rospy.get_param("~username", "admin")
        self.password = rospy.get_param("~password", "")
        self.ip_address = rospy.get_param("~ip_address", "192.168.1.1")
        self.port = rospy.get_param("~port", "80")
        self.stopped = False

        rospy.Subscriber("twist", Twist, self.twist_cb)

        rospy.spin()

    def twist_cb(self, msg):
        """Convert desired velocities into motion commands."""
        # pylint: disable=no-member
        # Don't bother sending commands if all zeroes are requested.
        if msg.linear.x == 0.0 and msg.angular.z == 0:
            if self.stopped:
                return
            direction = Commands.STOP_UP.value
            self.move(direction)
            direction = Commands.STOP_LEFT.value
            self.move(direction)
            self.stopped = True
            return

        if msg.linear.x > 0:
            direction = Commands.MOVE_UP.value
        elif msg.linear.x < 0:
            direction = Commands.MOVE_DOWN.value
        else:
            direction = Commands.STOP_DOWN.value

        self.move(direction)

        if msg.angular.z > 0:
            direction = Commands.MOVE_RIGHT.value
        elif msg.angular.z < 0:
            direction = Commands.MOVE_LEFT.value
        else:
            direction = Commands.STOP_LEFT.value

        self.move(direction)
        self.stopped = False

    # pylint: enable=no-member

    def move(self, direction):
        """Create command to move camera in desired direction."""
        cmd = {"command": direction}
        self.send_cmd("decoder_control.cgi", cmd)

    def send_cmd(self, cgi, parameters):
        """Send command to camera."""
        url = "http://%s:%s/%s?user=%s&pwd=%s" % (
            self.ip_address,
            self.port,
            cgi,
            self.username,
            self.password,
        )
        for param in parameters:
            url = url + "&%s=%s" % (param, parameters[param])

        return urllib.urlopen(url)  # nosec # pylint: disable=no-member


if __name__ == "__main__":
    rospy.init_node("foscam_ptz")
    try:
        FoscamPTZ()
    except rospy.ROSInterruptException:
        pass
